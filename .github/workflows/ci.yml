name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14.0
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      RAILS_ENV: test
      DATABASE_HOST: postgres
      DATABASE_USER: user
      DATABASE_PASSWORD: password
      DATABASE_NAME: test

    steps:
      - name: Check PostgreSQL connection
        run: |
          echo "Testing PostgreSQL connection to host=$DATABASE_HOST..."
          apt-get update && apt-get install -y postgresql-client
          for i in {1..10}; do
            pg_isready -h $DATABASE_HOST -U $DATABASE_USER && echo "Postgres is ready!" && exit 0
            echo "Waiting for Postgres... ($i)"
            sleep 2
          done
          echo "Postgres failed to start in time" >&2
          exit 1

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install packages
        run: sudo apt-get update && sudo apt-get install -y libvips libpq-dev

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Setup database
        run: |
          cp config/database.ci.yml config/database.yml
          bin/rails db:prepare RAILS_ENV=test

      - name: Run RSpec
        run: bundle exec rspec

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore
